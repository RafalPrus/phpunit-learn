<?php

declare(strict_types=1);

namespace Test\Unit;

use App\Exceptions\RouteNotFoundException;
use App\Router;
use PHPUnit\Framework\TestCase;

class RouterTest extends TestCase
{
    private Router $router;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->router = new Router();
    }

    /** @test */
    public function itRegisterARoute(): void
    {
        // when we call a register method
        $this->router->register('get', '/users', ['Users', 'index']);

        $expected = [
            'get' => [
                '/users' => ['Users', 'index']
            ]
        ];

        // then we assert route
        $this->assertEquals($expected, $this->router->routes());
    }

    /** @test */
    public function itRegisterAGetRoute(): void
    {
        $this->router->get('/users', ['Users', 'index']);

        $expected = [
            'get' => [
                '/users' => ['Users', 'index']
            ]
        ];


        $this->assertEquals($expected, $this->router->routes());
    }

    /** @test */
    public function itRegisterAPostRoute(): void
    {
        $this->router->post('/users', ['Users', 'store']);

        $expected = [
            'post' => [
                '/users' => ['Users', 'store']
            ]
        ];


        $this->assertEquals($expected, $this->router->routes());
    }

    /** @test */
    public function thereAreNoRoutesWhenRouterIsCreated(): void
    {
        // new instation of Router because of test spec
        $this->router = new Router();

        $this->assertEmpty($this->router->routes());
    }

    /**
     * @test
     * @dataProvider routeNotFoundCases
     */
    public function itThrowsFileNotFoundException(string $requestUri, string $requestMethod)
    {
        $users = new class() {
            public function delete(): bool
            {
                return true;
            }
        };
        $this->router->post('/users', [$users::class, 'store']);
        $this->router->get('/users', ['Users', 'index']);


        $this->expectException(RouteNotFoundException::class);
        $this->router->resolve($requestUri, $requestMethod);
    }

    public function routeNotFoundCases(): array
    {
        return [
            ['/users', 'patch'],
            ['/invoices', 'post'],
            ['/users', 'get'],
            ['/users', 'post']
        ];
    }
}